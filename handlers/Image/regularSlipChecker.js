// regularSlipChecker.js
import { sendMessageRight } from "../../reply/right_reply.js";
import { sendMessageWait } from "../../reply/text_reply.js";
import { sendMessageOld } from "../../reply/oldpic_reply.js";
import { sendMessageWrong } from "../../reply/wrong_reply.js";
import { sendMessageMinimum } from "../../reply/minimum_reply.js";
import { sendImageToSlip2Go } from "./slipService.js"; 
import { saveQRDatabaseToFile } from "../../utils/qrData.js";
import bankCodeMapping from "../../utils/bankCodeMapping.js";
import { updateSlipStats } from "../../utils/slipStatsManager.js";
import { reportSlipResultToAPI } from "../../utils/slipStatsManager.js";
import { broadcastLog } from "../../index.js";
import { isAccountNumberMatch } from "../../utils/accountUtils.js";
import BankAccount from "../../models/BankAccount.js";
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc.js';
import timezone from 'dayjs/plugin/timezone.js'; 

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥
 * @param {object} client - LINE client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
 * @param {string} messageId - ‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏£‡∏π‡∏õ
 * @param {string} replyToken - reply token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö LINE
 * @param {string} prefix - ‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
 * @param {Map} qrDatabase - ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR Code
 * @param {string} qrData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR ‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏î‡πâ
 * @param {string} userId - ‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ
 */

dayjs.extend(utc);
dayjs.extend(timezone);

export async function handleRegularSlip(
  client,
  messageId,
  replyToken,
  prefix,
  qrDatabase,
  qrData,
  userId,
  lineName,     // <--- ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏£‡∏±‡∏ö lineName
  image,        // <--- ‡∏£‡∏≠‡∏£‡∏±‡∏ö image
  linename,     // <--- ‡∏£‡∏≠‡∏£‡∏±‡∏ö linename
  tranRef,     // <--- ‡∏£‡∏≠‡∏£‡∏±‡∏ö tranRef
  isNew,
  replyInfo
) {
  try {
    const now = Date.now();
    const Slip2GoResponse = await sendImageToSlip2Go(client, messageId);
    const bankList = await BankAccount.find({ prefix });

    const thaiTime = dayjs().tz("Asia/Bangkok").format("HH:mm") + " ‡∏ô.";
    if (Slip2GoResponse.status === "valid") {
    const data = Slip2GoResponse.data?.data;
        if (!data || data.amount == null) return { amount: undefined };
        const Amount = data.amount;
        console.log(`üí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏™‡∏•‡∏¥‡∏õ: ${Amount} ‡∏ö‡∏≤‡∏ó`);
        broadcastLog(`üí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏™‡∏•‡∏¥‡∏õ: ${Amount} ‡∏ö‡∏≤‡∏ó`);

      // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Amount (‡∏Å‡∏£‡∏ì‡∏µ SlipOK error, timeout, ‡∏Ø‡∏•‡∏Ø)
      if (Amount === undefined || Amount === null) {
        return { amount: undefined };
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á entry ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö QR code ‡∏ô‡∏µ‡πâ
      const qrEntry = {
        firstDetected: now,
        users: new Map([[userId, { lastSentTime: now, messageCount: 1 }]])
      };

      qrEntry.amount = Amount;

      qrDatabase.set(qrData, qrEntry);
      saveQRDatabaseToFile(prefix, qrDatabase);

        if (bankList.length === 0) {
          console.log("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ");
          broadcastLog("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ");
        } else {
          const activeAccounts = bankList.filter(acc => acc.status === true); // ‚úÖ ‡∏Ñ‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î
      
              if (activeAccounts.length === 0) {
                console.log("‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö.... ");
                broadcastLog("‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö.... ");
              } else {
                const receiverAccount = data.receiver?.account?.bank?.account || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
                let accountMatched = false;
            
                for (const account of activeAccounts) {
                  console.log(`‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: ${receiverAccount} ‡∏Å‡∏±‡∏ö ${account.account}`);
                  broadcastLog(`‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: ${receiverAccount} ‡∏Å‡∏±‡∏ö ${account.account}`);
                  if (isAccountNumberMatch(receiverAccount, account.account)) {
                    console.log(`üéØ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö: ${receiverAccount}`);
                    broadcastLog(`üéØ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö: ${receiverAccount}`);
                    accountMatched = true;
                    break;
                  } else {
                    console.log(`‚ùå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö: ${receiverAccount}`);
                    broadcastLog(`‚ùå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö: ${receiverAccount}`);
                  }
                }

                if (!accountMatched) {
                  console.log(`üî¥ ‡∏û‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚ùå`);
                  broadcastLog(`üî¥ ‡∏û‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚ùå`);
                  updateSlipStats(prefix, "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏•‡∏¥‡∏õ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß", data.amount);
                  await sendMessageWrong(replyToken, client,
                    tranRef, data.amount, data.sender?.account?.name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                    data.sender?.account?.bank?.account || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                    data.receiver?.account?.name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                    data.receiver?.account?.bank?.account || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
                  );
                  await reportSlipResultToAPI({
                    time: thaiTime,
                    shop: linename,
                    lineName,
                    image,
                    status: "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ú‡∏¥‡∏î",
                    response: "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß",
                    amount: Amount,
                    ref: data.qrcodeData
                  });
                  return { amount: Amount };
                }
            }
          }

            const fromBank = data.sender.bank?.name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
            const toBank = data.receiver.bank?.name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
            const transactionDate = dayjs(data.dateTime).tz("Asia/Bangkok");

            const daysDifference = dayjs().tz("Asia/Bangkok").diff(transactionDate, 'day');

            const timeOnly = transactionDate.format("HH:mm") + " ‡∏ô.";

            // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà + ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô + ‡∏õ‡∏µ‡πÑ‡∏ó‡∏¢
            const monthsThai = [
              "‡∏°.‡∏Ñ.", "‡∏Å.‡∏û.", "‡∏°‡∏µ.‡∏Ñ.", "‡πÄ‡∏°.‡∏¢.", "‡∏û.‡∏Ñ.", "‡∏°‡∏¥.‡∏¢.",
              "‡∏Å.‡∏Ñ.", "‡∏™.‡∏Ñ.", "‡∏Å.‡∏¢.", "‡∏ï.‡∏Ñ.", "‡∏û.‡∏¢.", "‡∏ò.‡∏Ñ."
            ];

            const formattedTransactionDateTime = `${transactionDate.date()} ${
              monthsThai[transactionDate.month()]
            } ${transactionDate.year() + 543} ${timeOnly}`;
            
            if (Amount < process.env.MINIMUM_AMOUNT) {
              console.log(`üü° ‡∏û‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${Amount} ‡∏ö‡∏≤‡∏ó ‚ùï`);
              broadcastLog(`üü° ‡∏û‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${Amount} ‡∏ö‡∏≤‡∏ó ‚ùï`);
              updateSlipStats(prefix, "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏•‡∏¥‡∏õ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß", Amount);
              await sendMessageMinimum(replyToken,client,formattedTransactionDateTime,
                tranRef,data.amount,data.sender?.account?.name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                fromBank ,data.sender?.account?.bank?.account || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                data.receiver?.account?.name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                data.receiver?.account?.bank?.account || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
              );
              await reportSlipResultToAPI({
                time: thaiTime,
                shop: linename,
                lineName,
                image,
                status: "‡∏™‡∏•‡∏¥‡∏õ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πà‡∏≥",
                response: "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß",
                amount: Amount,
                ref: data.qrcodeData
              });
              return { amount: Amount };
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏ß‡∏±‡∏ô
            if (daysDifference > 2) {
              console.log("üü° ‡∏û‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏ß‡∏±‡∏ô ‚ùï");
              broadcastLog("üü° ‡∏û‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏ß‡∏±‡∏ô ‚ùï");
              updateSlipStats(prefix, "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏•‡∏¥‡∏õ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß", Amount);
              await sendMessageOld(replyToken,client,formattedTransactionDateTime,
                tranRef,data.amount,data.sender?.account?.name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                fromBank, data.sender?.account?.bank?.account || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                data.receiver?.account?.name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", toBank,
                data.receiver?.account?.bank?.account || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
              );
              await reportSlipResultToAPI({
                time: thaiTime,
                shop: linename,
                lineName,
                image,
                status: "‡∏™‡∏•‡∏¥‡∏õ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á",
                response: "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß",
                amount: Amount,
                ref: data.qrcodeData
              });
              return { amount: Amount };
            }
  
            // ‡∏´‡∏≤‡∏Å‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ß‡πà‡∏≤ "‡∏™‡∏•‡∏¥‡∏õ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡∏°‡πà"
            console.log("üü¢ ‡∏™‡∏•‡∏¥‡∏õ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚úÖ");
            broadcastLog("üü¢ ‡∏™‡∏•‡∏¥‡∏õ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚úÖ");
            updateSlipStats(prefix, "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏•‡∏¥‡∏õ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß", Amount);

            // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏Å
            await sendMessageRight(
              replyToken,
              client,
              formattedTransactionDateTime,
              tranRef,
              data.amount,
              data.sender?.account?.name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
              fromBank,
              data.sender?.account?.bank?.account || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
              data.receiver?.account?.name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
              toBank,
              data.receiver?.account?.bank?.account || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
            );

            // ‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° info ‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
            if (isNew && replyInfo) {
              await client.pushMessage(userId, {
                type: 'text',
                text: replyInfo
              });
            }

            await reportSlipResultToAPI({
              time: thaiTime,
              shop: linename,
              lineName,
              image,
              status: "‡∏™‡∏•‡∏¥‡∏õ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
              response: "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß",
              amount: Amount,
              ref: data.qrcodeData
            });
            return { amount: Amount };
          }        
            if (Slip2GoResponse.status === "Wait") {
              const thaiTime = dayjs().tz("Asia/Bangkok").format("HH:mm") + " ‡∏ô.";
              console.log("‚è±Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö");
              broadcastLog("‚è±Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö");
              await sendMessageWait(replyToken, client);
              await reportSlipResultToAPI({
                time: thaiTime,
                shop: linename,
                lineName,
                image,
                status: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
                response: "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö '' ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ''",
                amount: undefined,
                ref: qrData
              });
              return { amount: undefined };
            }
          
            if (Slip2GoResponse.status === "timeout") {
              console.log("‚è±Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ");
              broadcastLog("‚è±Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ");
              await sendMessageWait(replyToken, client);
              await reportSlipResultToAPI({
                time: thaiTime,
                shop: linename,
                lineName,
                image,
                status: "‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ",
                response: "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö '' ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ''",
                amount: undefined,
                ref: qrData
              });
              return { amount: undefined };
            }
          
            if (Slip2GoResponse.status === "ignored" || Slip2GoResponse.status === "error") {
              await reportSlipResultToAPI({
                time: thaiTime,
                shop: linename,
                lineName,
                image,
                status: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
                response: "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö",
                amount: undefined,
                ref: qrData
              });
              return { amount: undefined };
            }
          
          } catch (err) {
            console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ: ${err.message}`);
            broadcastLog(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ: ${err.message}`);
            return { amount: undefined };
          }
        }

function getBankName(bankCode) {
  if (!bankCode || bankCode.trim() === "") {
    return ""; 
  }
  return bankCodeMapping[bankCode]?.fullName || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
}


