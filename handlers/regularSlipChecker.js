// regularSlipChecker.js
import { sendMessageRight } from "../reply/right_reply.js";
import { sendMessageWait } from "../reply/text_reply.js";
import { sendMessageOld } from "../reply/oldpic_reply.js";
import { sendMessageWrong } from "../reply/wrong_reply.js";
import { sendMessageMinimum } from "../reply/minimum_reply.js";
import { sendImageToSlipOK } from "./slipService.js"; 
import { saveQRDatabaseToFile } from "../qrdata/qrData.js";
import bankCodeMapping from "../utils/bankCodeMapping.js";
import { updateSlipStats } from "../utils/slipStatsManager.js";
import { reportSlipResultToAPI } from "../utils/slipStatsManager.js";
import { broadcastLog } from "../index.js";

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥
 * @param {object} client - LINE client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
 * @param {string} messageId - ‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏£‡∏π‡∏õ
 * @param {string} replyToken - reply token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö LINE
 * @param {string} prefix - ‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
 * @param {Map} qrDatabase - ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR Code
 * @param {string} qrData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR ‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏î‡πâ
 * @param {string} userId - ‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ
 */


export async function handleRegularSlip(
  client,
  messageId,
  replyToken,
  prefix,
  qrDatabase,
  qrData,
  userId,
  userMessageCount, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
  userInfo,
  bankAccounts, // ‚úÖ ‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
  lineName,
  image
) {
  try {
    const now = Date.now();
    const slipOKResponse = await sendImageToSlipOK(client, messageId);

    if (slipOKResponse.status === "valid") {
      const data = slipOKResponse.data;
      if (!data) return { amount: undefined };
        const Amount = data.amount;
        console.log(`üí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏™‡∏•‡∏¥‡∏õ: ${Amount} ‡∏ö‡∏≤‡∏ó`);
        broadcastLog(`üí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏™‡∏•‡∏¥‡∏õ: ${Amount} ‡∏ö‡∏≤‡∏ó`);

      // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Amount (‡∏Å‡∏£‡∏ì‡∏µ SlipOK error, timeout, ‡∏Ø‡∏•‡∏Ø)
      if (Amount === undefined || Amount === null) {
        return { amount: undefined };
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á entry ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö QR code ‡∏ô‡∏µ‡πâ
      const qrEntry = {
        firstDetected: now,
        users: new Map([[userId, { lastSentTime: now, messageCount: 1 }]])
      };

      qrEntry.amount = Amount;

      qrDatabase.set(qrData, qrEntry);
      saveQRDatabaseToFile(prefix, qrDatabase);

            const accountData = bankAccounts[prefix] || [];

            if (accountData.length === 0) {
              // ‚úÖ ‡∏Ñ‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà active
              const activeAccounts = accountData.filter(account => account.status);

              if (activeAccounts.length === 0) {
                console.log("‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡πÑ‡∏°‡πà‡∏°‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö.... ");
            } else {
          
                const receiverName = cleanReceiverName(data.receiver?.displayName || "");
                const receiverAccount = data.receiver?.account?.value || data.receiver?.proxy?.value || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
                let accountMatched = false;

                for (const account of activeAccounts) {
                    if (isNameMatch(receiverName, account)) {  // üî• ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠
                        console.log(`‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: ${account.THname} / ${account.ENGname}`);

                        if (isAccountNumberMatch(receiverAccount, account.account)) {  // üî• ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
                            console.log(`‚úÖ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô: ${receiverAccount}`);
                            accountMatched = true;
                            break;  // ‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏á
                        } else {
                            console.log(`‚ùå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö: ${receiverAccount}`);
                        }
                    }
                }
          
                if (!accountMatched) {
                  console.log(`üî¥ ‡∏û‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚ùå`);
                  broadcastLog(`üî¥ ‡∏û‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚ùå`);
                  updateSlipStats(prefix, "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏•‡∏¥‡∏õ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß", data.amount);
                  await sendMessageWrong(replyToken,client,
                    data.transRef,data.amount,data.sender?.displayName || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                    data.sender?.account.value || data.sender?.proxy.value,
                    data.receiver?.displayName || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                    data.receiver?.account.value || data.receiver?.proxy.value      
                  );
                  await reportSlipResultToAPI({
                    time: new Date().toLocaleTimeString("th-TH", {
                      hour: "2-digit",
                      minute: "2-digit"
                    }) + " ‡∏ô.",
                    shop: prefix,
                    lineName,
                    image,
                    status: "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ú‡∏¥‡∏î",
                    response: "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß",
                    amount: Amount,
                    ref: data.transRef
                  });
                  return { amount: Amount };
                }
            }
        }

            const fromBank = getBankName(data.sendingBank) || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
            const toBank = getBankName(data.receivingBank) || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
            const transactionDate = new Date(
              `${data.transDate.slice(0, 4)}-${data.transDate.slice(4, 6)}-${data.transDate.slice(6, 8)}T${data.transTime}+07:00`
            );

            const thaiTime = new Date(now).toLocaleTimeString("th-TH", {
              hour: "2-digit",
              minute: "2-digit",
              hour12: false,
              timeZone: "Asia/Bangkok"
            }) + " ‡∏ô.";
            
            const daysDifference = (now - transactionDate.getTime()) / (1000 * 60 * 60 * 24);

            const timeOnly = transactionDate.toLocaleTimeString("th-TH", {
              hour: "2-digit",
              minute: "2-digit",
              hour12: false,
              timeZone: "Asia/Bangkok"
            }) + " ‡∏ô.";
  
            const monthsThai = [
                "‡∏°.‡∏Ñ.", "‡∏Å.‡∏û.", "‡∏°‡∏µ.‡∏Ñ.", "‡πÄ‡∏°.‡∏¢.", "‡∏û.‡∏Ñ.", "‡∏°‡∏¥.‡∏¢.",
                "‡∏Å.‡∏Ñ.", "‡∏™.‡∏Ñ.", "‡∏Å.‡∏¢.", "‡∏ï.‡∏Ñ.", "‡∏û.‡∏¢.", "‡∏ò.‡∏Ñ."
            ];

            const formattedTransactionDateTime = `${transactionDate.getDate()} ${
              monthsThai[transactionDate.getMonth()]
            } ${transactionDate.getFullYear() + 543} ${timeOnly}`;

            
            if (Amount < process.env.MINIMUM_AMOUNT) {
              console.log(`üü° ‡∏û‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${Amount} ‡∏ö‡∏≤‡∏ó ‚ùï`);
              broadcastLog(`üü° ‡∏û‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${Amount} ‡∏ö‡∏≤‡∏ó ‚ùï`);
              updateSlipStats(prefix, "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏•‡∏¥‡∏õ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß", Amount);
              await sendMessageMinimum(replyToken,client,formattedTransactionDateTime,
                data.transRef,data.amount,data.sender?.displayName || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                fromBank ,data.sender?.account.value || data.sender?.proxy.value,
                data.receiver?.displayName || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", toBank,
                data.receiver?.account.value || data.receiver?.proxy.value
              );
              await reportSlipResultToAPI({
                time: thaiTime,
                shop: prefix,
                lineName,
                image,
                status: "‡∏™‡∏•‡∏¥‡∏õ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πà‡∏≥",
                response: "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß",
                amount: Amount,
                ref: data.transRef
              });
              return { amount: Amount };
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏ß‡∏±‡∏ô
            if (daysDifference > 2) {
              console.log("üü° ‡∏û‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏ß‡∏±‡∏ô ‚ùï");
              broadcastLog("üü° ‡∏û‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏ß‡∏±‡∏ô ‚ùï");
              updateSlipStats(prefix, "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏•‡∏¥‡∏õ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß", Amount);
              await sendMessageOld(replyToken,client,formattedTransactionDateTime,
                data.transRef,data.amount,data.sender?.displayName || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                fromBank, data.sender?.account.value || data.sender?.proxy.value,
                data.receiver?.displayName || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", toBank,
                data.receiver?.account.value || data.receiver?.proxy.value
              );
              await reportSlipResultToAPI({
                time: thaiTime,
                shop: prefix,
                lineName,
                image,
                status: "‡∏™‡∏•‡∏¥‡∏õ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á",
                response: "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß",
                amount: Amount,
                ref: data.transRef
              });
              return { amount: Amount };
            }
  
            // ‡∏´‡∏≤‡∏Å‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ß‡πà‡∏≤ "‡∏™‡∏•‡∏¥‡∏õ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡∏°‡πà"
            console.log("üü¢ ‡∏™‡∏•‡∏¥‡∏õ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚úÖ");
            broadcastLog("üü¢ ‡∏™‡∏•‡∏¥‡∏õ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚úÖ");
            updateSlipStats(prefix, "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏•‡∏¥‡∏õ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß", Amount);
            await sendMessageRight(replyToken,client,formattedTransactionDateTime,
              data.transRef,data.amount,data.sender?.displayName || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
              fromBank, data.sender?.account.value || data.sender?.proxy.value,
              data.receiver?.displayName || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", toBank,
              data.receiver?.account.value || data.receiver?.proxy.value
            );
            await reportSlipResultToAPI({
              time: thaiTime,
              shop: prefix,
              lineName,
              image,
              status: "‡∏™‡∏•‡∏¥‡∏õ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
              response: "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß",
              amount: Amount,
              ref: data.transRef
            });
            return { amount: Amount };
          } else if (
            slipOKResponse.status === "Wait" ||
            slipOKResponse.status === "timeout"
          ) {
            await sendMessageWait(replyToken, client);
            return { amount: undefined };
          } else if (
            slipOKResponse.status === "ignored" ||
            slipOKResponse.status === "error"
          ) {
            return { amount: undefined };
          }
        } catch (err) {
          console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ: ${err.message}`);
          broadcastLog(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ: ${err.message}`);
          return { amount: undefined };
        }
    }

function getBankName(bankCode) {
  if (!bankCode || bankCode.trim() === "") {
    return ""; 
  }
  return bankCodeMapping[bankCode]?.fullName || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
}


