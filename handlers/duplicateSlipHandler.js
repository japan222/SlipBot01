// duplicateSlipHandler.js
import { sendMessageWait } from "../reply/text_reply.js";
import { sendMessageSame } from "../reply/same_reply.js";
import fs from "fs";
import { loadQRDatabaseFromFile, saveQRDatabaseToFile } from "../qrdata/qrData.js";
import { scan_qr_code, streamToBuffer } from "../utils/qrSlipworker.js";
import { handleRegularSlip } from "../handlers/regularSlipChecker.js";
import { getLineProfile } from "../utils/getLineProfile.js";
import { reportSlipResultToAPI } from "../utils/slipStatsManager.js";
import { broadcastLog } from "../index.js";
import { loadSettings } from '../config/settings.js';

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏ã‡πâ‡∏≥
 * @param {string} qrData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR ‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏î‡πâ
 * @param {string} userId - ‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @param {Map} qrDatabase - ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR Code
 * @param {object} client - LINE client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
 * @param {string} replyToken - reply token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö LINE
 * @param {string} prefix - ‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
 */

let shopData = []; 

const loadShopData = () => {
  try {
    const rawData = fs.readFileSync("./line_shops.json", "utf-8");
    const jsonData = JSON.parse(rawData);
    shopData = jsonData.shops || [];
  } catch (error) {
    console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î line_shops.json:", error.message);
    broadcastLog(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î line_shops.json: ${error.message}`); 
    shopData = []; // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ shopData ‡πÄ‡∏õ‡πá‡∏ô array ‡∏ß‡πà‡∏≤‡∏á
  }
};

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
loadShopData();

let bankAccounts = loadBankAccounts();
if (bankAccounts && Object.keys(bankAccounts).length > 0) {
} else {
  console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ");
  broadcastLog("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ");
}

let currentSettings = loadSettings();

export function getSettings() {
  return currentSettings;
}

export function reloadSettings() {
  currentSettings = loadSettings();
}
const {
  timeLimit,
  sameQrTimeLimit,
  maxMessagesPerUser,
  maxMessagesSamePerUser,
  maxProcessingPerUser
} = getSettings();

const programStartTime = Date.now(); // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
const userProcessingQueue = new Map(); // ‡∏Ñ‡∏¥‡∏ß‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
const userMessageCount = new Map(); // ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á
const processedEvents = new Set(); // ‡πÄ‡∏Å‡πá‡∏ö event ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß

export async function handleEvent(event, client, prefix, qrDatabase) {
  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
  const rawData = fs.readFileSync("./line_shops.json", "utf-8");
  const shopData = JSON.parse(rawData).shops || [];
  const shop = shopData.find(shop => shop.prefix === prefix);

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!shop || !shop.status) return;
  
  console.log(`üì© ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${event.message?.type || event.type} ‡∏à‡∏≤‡∏Å ${prefix}`);
  broadcastLog(`üì© ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${event.message?.type || event.type} ‡∏à‡∏≤‡∏Å ${prefix}`);

  if (event.type !== "message" || event.message.type !== "image") return;
  console.log(`maxProcessingPerUser: ${maxProcessingPerUser}`);
  
  const userId = event.source.userId;
  const messageId = event.message.id;
  const now = Date.now();
  console.log("‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ (UTC):", now);
  const thaiTime = new Date(now).toLocaleTimeString("th-TH", {
    hour: "2-digit",
    minute: "2-digit",
    second: "2-digit",
    timeZone: "Asia/Bangkok"
  });
  console.log("‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ (‡πÑ‡∏ó‡∏¢):", thaiTime);
  const eventId = `${event.message?.id || event.timestamp}`;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ event ‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (processedEvents.has(eventId)) return;
    processedEvents.add(eventId);
    setTimeout(() => processedEvents.delete(eventId), 24 * 60 * 60 * 1000);


    if (event.timestamp < programStartTime) return;

    // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR Code ‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ
    qrDatabase = loadQRDatabaseFromFile(prefix) || new Map();

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    if (!userProcessingQueue.has(userId)) {
        userProcessingQueue.set(userId, []);
    }

    const userQueue = userProcessingQueue.get(userId);

    // ‚úÖ ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 2 ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    if (userQueue.length >= maxProcessingPerUser) {
      console.log(`‚ö†Ô∏è ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏ï‡πá‡∏° (2 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`);
      broadcastLog(`‚ö†Ô∏è ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏ï‡πá‡∏° (2 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`);
      return;
    }
    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß
    userQueue.push(async () => {
      try {
          console.log(`üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏•‡∏¥‡∏õ‡∏Ç‡∏≠‡∏á ${userId} (${userQueue.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß)`);
          broadcastLog(`üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏•‡∏¥‡∏õ‡∏Ç‡∏≠‡∏á ${userId} (${userQueue.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß)`);
          const stream = await client.getMessageContent(messageId);
          const buffer = await streamToBuffer(stream);

          const qrData = await scan_qr_code(buffer);
          const profile = await getLineProfile(userId, shop.lines[0].access_token);

          const lineName = profile?.displayName || "-";
          const image = profile?.pictureUrl || "";
          console.log(`üì• QR Code ‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏î‡πâ:`, qrData);
          broadcastLog(`üì• QR Code ‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏î‡πâ: ${qrData}`);

          // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡∏™‡∏•‡∏¥‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          if (!qrData) {
            console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö QR Code ‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ");
            broadcastLog("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö QR Code ‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ");
            return;
          }
          
          if (!userMessageCount.has(userId)) {
            userMessageCount.set(userId, { lastSentTime: 0, qrMessageCount: 0 });
          }

          const userInfo = userMessageCount.get(userId);
          
          // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ QR Code ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏Ñ‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß)
          if (qrDatabase.has(qrData)) {
            const qrInfo = qrDatabase.get(qrData);
        

            if (qrInfo.users.has(userId)) {
              const userRecord = qrInfo.users.get(userId); // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
              const lastSentTime = userRecord.lastSentTime || 0;
              const sameMessageCount = userRecord.messageCount || 0;
          
              if (now - lastSentTime < sameQrTimeLimit) {
                if (sameMessageCount < maxMessagesSamePerUser) {
                    console.log(`üîî ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö "‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà" ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö ${userId}`);
                    broadcastLog(`üîî ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö "‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà" ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö ${userId}`);
                    await sendMessageWait(event.replyToken, client);

                    qrInfo.users.set(userId, {
                        lastSentTime: now,
                        messageCount: sameMessageCount + 1
                    });
          
                    saveQRDatabaseToFile(prefix, qrDatabase);
                    return;
                } else {
                    console.log(`‚è≥ ‡πÄ‡∏û‡∏¥‡∏Å‡πÄ‡∏â‡∏¢: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô ${maxMessagesSamePerUser} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);
                    broadcastLog(`‚è≥ ‡πÄ‡∏û‡∏¥‡∏Å‡πÄ‡∏â‡∏¢: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô ${maxMessagesSamePerUser} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);
                    return;
                }
            }
        }
            // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏õ‡πá‡∏ô "üî¥ ‡∏û‡∏ö‡∏™‡∏•‡∏¥‡∏õ QR Code ‡∏ã‡πâ‡∏≥ ‚ùå"
            console.log(`üî¥ ‡∏û‡∏ö‡∏™‡∏•‡∏¥‡∏õ QR Code ‡∏ã‡πâ‡∏≥ ‚ùå`);
            broadcastLog(`üî¥ ‡∏û‡∏ö‡∏™‡∏•‡∏¥‡∏õ QR Code ‡∏ã‡πâ‡∏≥ ‚ùå`);
            saveQRDatabaseToFile(prefix, qrDatabase);
            
            // ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡πà‡∏≠‡∏ô
            await reportSlipResultToAPI({
                time: getCurrentTimeOnly(),  // ‡πÄ‡∏û‡∏¥‡πà‡∏° () ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
                shop: prefix,
                lineName,
                image,
                status: "‡∏™‡∏•‡∏¥‡∏õ‡∏ã‡πâ‡∏≥‡πÄ‡∏î‡∏¥‡∏°",
                response: "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß",
                amount: qrInfo.amount,
                ref: qrData
            });

            return sendMessageSame(
              event.replyToken, 
              client, 
              new Date(qrInfo.firstDetected).toLocaleString("th-TH", {
                timeZone: "Asia/Bangkok"
              }) + " ‡∏ô.",
              qrData
          );
          }

          if (now - userInfo.lastSentTime < timeLimit && userInfo.qrMessageCount >= maxMessagesPerUser) {
            console.log(`‚è≥ ‡πÄ‡∏û‡∏¥‡∏Å‡πÄ‡∏â‡∏¢: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏Å‡∏¥‡∏ô ${maxMessagesPerUser} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);
            broadcastLog(`‚è≥ ‡πÄ‡∏û‡∏¥‡∏Å‡πÄ‡∏â‡∏¢: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏Å‡∏¥‡∏ô ${maxMessagesPerUser} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);
            return;
          }
            userMessageCount.set(userId, {
              lastSentTime: now,
              qrMessageCount: userInfo.qrMessageCount + 1
          });

          const qrEntry = {
            firstDetected: now,
            users: new Map([
              [userId, { lastSentTime: now, messageCount: 1 }]
            ])
          };

          if (shop.slipCheckOption === "all") {
            console.log(`üÜï ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà SlipOK`);
            broadcastLog(`üÜï ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà SlipOK`);
            // ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ regularSlipChecker.js ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SlipOK
            const slipData = await handleRegularSlip(
              client,
              event.message.id,
              event.replyToken,
              prefix,
              qrDatabase,
              qrData,
              userId,
              userMessageCount,
              userInfo,
              bankAccounts,
              lineName,
              image
            );

            // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤ amount ‡∏´‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å SlipOK
            if (slipData && slipData.amount !== undefined) {
              qrEntry.amount = slipData.amount;
              console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤ Amount: ${slipData.amount}`);
              broadcastLog(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤ Amount: ${slipData.amount}`);
            }
          }
  
          // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR Code
          qrDatabase.set(qrData, qrEntry);
          saveQRDatabaseToFile(prefix, qrDatabase);

  } catch (error) {
      console.error(`‚ùå Error processing event for PREFIX ${prefix}: ${error.message}`);
      broadcastLog(`‚ùå Error processing event for PREFIX ${prefix}: ${error.message}`);
  } finally {
      // ‚úÖ ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß
      userQueue.shift();

      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏á‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      if (userQueue.length > 0) {
          userQueue[0]();
        } else {
          // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏´‡∏°‡∏î ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå userQueue ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
          userProcessingQueue.delete(userId);
      }
    }
});

  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
  if (userQueue.length === 1) {
      userQueue[0]();
  }
}

function getCurrentTimeOnly() {
  return new Date().toLocaleTimeString("th-TH", {
    hour: "2-digit",
    minute: "2-digit",
    timeZone: "Asia/Bangkok"
  }) + " ‡∏ô.";
}

function loadBankAccounts() {
  try {
    const rawData = fs.readFileSync("./bank_accounts.json", "utf-8");
    const jsonData = JSON.parse(rawData);
    return jsonData.accounts || {}; // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
  } catch (error) {
    console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î bank_accounts.json:", error.message);
    broadcastLog(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î bank_accounts.json:", ${error.message}`);
    return {};
  }
}




