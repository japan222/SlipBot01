// Global state
window.shopData = [];
window.currentShopPrefix = "";
window.currentEditingPrefix = "";
window.currentEditingIndex = 0;


// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î
async function loadShops() {
    try {
        const response = await fetch("/api/shops");
        const data = await response.json();
        shopData = data.shops || [];
    } catch (error) {
        console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
    }
}

function openShopLinesModal(prefix) {
    currentShopPrefix = prefix; // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ prefix ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const modal = document.getElementById("shopLinesModal");
    const lineListElement = document.getElementById("line-list");
    const modalTitle = document.getElementById("modal-shop-title"); // ‡∏î‡∏∂‡∏á h2

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ prefix ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    const shop = shopData.find(s => s.prefix === prefix);

    if (!shop) return;

    // **‡πÄ‡∏ï‡∏¥‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏•‡∏á‡πÉ‡∏ô Modal**
    modalTitle.innerHTML = `
            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/41/LINE_logo.svg/120px-LINE_logo.svg.png" id="line-logo"/>
            ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ LINE ‡∏£‡πâ‡∏≤‡∏ô ${shop.name}
        `;

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE
    if (!shop.lines || shop.lines.length === 0) {
        lineListElement.innerHTML = "<p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE</p>";
    } else {
        let html = "";
        shop.lines.forEach((line, index) => {
            html += `
                    <div class="shop-line-item">
                        <span>${line.linename}</span>
                        <div>
                            <button class="line-btn-edit" onclick="editLine('${prefix}', ${index})">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                            <button class="line-btn-delete" onclick="deleteLine('${prefix}', ${index})">‡∏•‡∏ö</button>
                        </div>
                    </div>
                `;
        });
        lineListElement.innerHTML = html;
    }

    modal.style.display = "flex";
}

function closeEditBankModal() {
    document.getElementById("editbankModal").style.display = "none";
}

// ‡∏õ‡∏¥‡∏î Modal
function closeShopLinesModal() {
    document.getElementById("shopLinesModal").style.display = "none";
}


// ‡πÄ‡∏õ‡∏¥‡∏î Modal ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE
function addNewLine() {
    document.getElementById("addLineModal").style.display = "flex";

    // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á
    const shop = shopData.find(s => s.prefix === currentShopPrefix);
    if (shop) {
        document.getElementById("shopNameTitle").innerText = shop.name.toUpperCase();
    }
}

// ‡∏õ‡∏¥‡∏î Modal ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE
function closeAddLineModal() {
    document.getElementById("addLineModal").style.display = "none";
}

function showAlertMessage(message, elementId = "alertMessageAddline", isSuccess = false) {
    const alertDiv = document.getElementById(elementId);
    if (!alertDiv) {
        return;
    }

    alertDiv.innerText = message;
    alertDiv.style.color = isSuccess ? "green" : "red";
    alertDiv.style.backgroundColor = isSuccess ? "#e6ffe6" : "#ffe6e6";
    alertDiv.style.border = isSuccess ? "1px solid green" : "1px solid red";
    alertDiv.style.display = "block";

    setTimeout(() => {
        alertDiv.style.display = "none";
    }, 3000);
}

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE ‡πÉ‡∏´‡∏°‡πà
async function saveNewLine() {
    const newLineName = document.getElementById("newLineName").value.trim();
    const newAccessToken = document.getElementById("newAccessToken").value.trim();
    const newSecretToken = document.getElementById("newSecretToken").value.trim();

    if (!newLineName || !newAccessToken || !newSecretToken) {
        showAlertMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô!", "alertMessageAddline", false);
        return;
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Access Token ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE
    const response = await fetch("/api/validate-access-token", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({ token: newAccessToken }),
    });

    const result = await response.json();

    if (!result.valid) {
        showAlertMessage(`${result.message}`, "alertMessageAddline", false);
        return;
    }

    // ‡∏ñ‡πâ‡∏≤ Access Token ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const shop = shopData.find(s => s.prefix === currentShopPrefix);
    if (!shop) return;

    shop.lines.push({
        linename: newLineName,
        access_token: newAccessToken,
        secret_token: newSecretToken,
    });

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
    const apiResponse = await fetch("/api/add-line", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            prefix: currentShopPrefix,
            linename: newLineName,
            access_token: newAccessToken,
            secret_token: newSecretToken
        })
    });

    const apiResult = await apiResponse.json();
    if (apiResult.success) {
        alert("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        closeAddLineModal();
        loadShopLines(currentShopPrefix); // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
    } else {
        showAlertMessage("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + apiResult.message, "alertMessageAddline", false);
    }
}

function loadShopLines(prefix) {
    console.log(`üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô: ${prefix}`);

    const shop = shopData.find(s => s.prefix === prefix);
    if (!shop) {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô shopData!", shopData);
        return;
    }

    const lineListElement = document.getElementById("line-list");

    if (!shop.lines || shop.lines.length === 0) {
        lineListElement.innerHTML = "<p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏•‡∏ô‡πå</p>";
        return;
    }

    let html = "";
    shop.lines.forEach((line, index) => {
        html += `
            <div class="shop-line-item">
                <span>${line.linename}</span>
                <div>
                    <button class="line-btn-edit" onclick="editLine('${prefix}', ${index})">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                    <button class="line-btn-delete" onclick="deleteLine('${prefix}', ${index})">‡∏•‡∏ö</button>
                </div>
            </div>
        `;
    });

    lineListElement.innerHTML = html;
    console.log("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", shop.lines);
}

async function deleteLine(prefix, index) {
    if (!confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏•‡∏ô‡πå‡∏ô‡∏µ‡πâ?")) return;

    const shop = shopData.find(s => s.prefix === prefix);
    if (!shop) return;

    shop.lines.splice(index, 1); // ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å array

    // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
    const response = await fetch("/api/delete-line", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prefix, index })
    });

    const result = await response.json();
    if (result.success) {
        alert("‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏•‡∏ô‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        loadShopLines(prefix); // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
    } else {
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + result.message);
    }
}

function editLine(prefix, index) {

    const shop = shopData.find(s => s.prefix === prefix);
    if (!shop) {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤!");
        return;
    }

    const line = shop.lines[index];
    if (!line) {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE!");
        return;
    }


    // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ prefix ‡πÅ‡∏•‡∏∞ index ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î Modal
    currentEditingPrefix = prefix;
    currentEditingIndex = index;

    document.getElementById("editLinename").value = line.linename;
    document.getElementById("editAccessToken").value = line.access_token;
    document.getElementById("editSecretToken").value = line.secret_token;

    document.getElementById("editLineModal").style.display = "flex";
}


function closeEditLineModal() {
    document.getElementById("editLineModal").style.display = "none";
}


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
async function saveEditedLine() {
    const newName = document.getElementById("editLinename").value.trim();
    const newAccessToken = document.getElementById("editAccessToken").value.trim();
    const newSecretToken = document.getElementById("editSecretToken").value.trim();

    console.log("üìå Debug: ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÑ‡∏õ API:", {
        prefix: currentEditingPrefix,  // <--- ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤!
        index: currentEditingIndex,
        linename: newName,
        access_token: newAccessToken,
        secret_token: newSecretToken
    });

    if (!currentEditingPrefix || currentEditingPrefix.trim() === "") {
        console.log("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤ Prefix ‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤");
        return;
    }

    if (!newName || !newAccessToken || !newSecretToken) {
        showAlertMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô!", "alertMessageEditLine", false);
        return;
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Access Token ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE
    const response = await fetch("/api/validate-access-token", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({ token: newAccessToken }),
    });

    const result = await response.json();

    if (!result.valid) {
        showAlertMessage(`${result.message}`, "alertMessageEditLine", false);
        return;
    }


    const apiResponse = await fetch("/api/update-line", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            prefix: currentEditingPrefix,
            index: currentEditingIndex,
            linename: newName,
            access_token: newAccessToken,
            secret_token: newSecretToken
        })
    });


    const apiResult = await apiResponse.json();  // ‡πÉ‡∏ä‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    console.log("üì° API Response:", apiResult);

    if (apiResult.success) {
        alert("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏•‡∏ô‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô shopData ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        const shop = shopData.find(s => s.prefix === currentEditingPrefix);
        if (shop) {
            shop.lines[currentEditingIndex].linename = newName;
            shop.lines[currentEditingIndex].access_token = newAccessToken;
            shop.lines[currentEditingIndex].secret_token = newSecretToken;
        }

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        updateShopLinesUI(currentEditingPrefix);

        // ‚úÖ ‡∏õ‡∏¥‡∏î Modal ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        closeEditLineModal();

    } else {
        showAlertMessage(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á!`, "alertMessageEditLine", false);
    }
}

function showAlertMessage(message, elementId = "alertMessageEditLine", isSuccess = false) {
    const alertDiv = document.getElementById(elementId);
    if (!alertDiv) {
        return;
    }

    alertDiv.innerText = message;
    alertDiv.style.color = isSuccess ? "green" : "red";
    alertDiv.style.backgroundColor = isSuccess ? "#e6ffe6" : "#ffe6e6";
    alertDiv.style.border = isSuccess ? "1px solid green" : "1px solid red";
    alertDiv.style.display = "block";

    setTimeout(() => {
        alertDiv.style.display = "none";
        console.log(`‚è≥ ‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà ${elementId}`);
    }, 3000);
}


function updateShopLinesUI(prefix) {
    const shop = shopData.find(s => s.prefix === prefix);
    const lineListElement = document.getElementById("line-list");

    if (!shop || !shop.lines || shop.lines.length === 0) {
        lineListElement.innerHTML = "<p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏•‡∏ô‡πå</p>";
        return;
    }

    let html = "";
    shop.lines.forEach((line, index) => {
        html += `
            <div class="shop-line-item">
                <span>${line.linename}</span>
                <div>
                    <button class="line-btn-edit" onclick="editLine('${prefix}', ${index})">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                    <button class="line-btn-delete" onclick="deleteLine('${prefix}', ${index})">‡∏•‡∏ö</button>
                </div>
            </div>
        `;
    });

    lineListElement.innerHTML = html;
}

window.addEventListener("DOMContentLoaded", loadShops);

function openShopInfoModal(shop) {
    document.getElementById("shopInfoTitle").textContent = `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô: ${shop.name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠"}`;
    document.getElementById("shopInfoModal").style.display = "flex";

    const linesHTML = (shop.lines && shop.lines.length > 0)
        ? `
        <p class="top-list"><strong>‡πÑ‡∏•‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ</strong></p>
        <ul class="line-list-ul">
          ${shop.lines.map((line, index) => `
            <li>
            <strong>${line.linename}</strong><br>
            <span class="webhook-path">
                <span class="no-select-arrow"><strong> Webhook ‚û°Ô∏è </strong></span>https://slipchecker.onrender.com/webhook/${shop.prefix}/line${index + 1}.bot
            </span>
            </li>
          `).join("")}
        </ul>`
        : `<p class="no-line">‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ß‡πâ</p>`;

    document.getElementById("shopInfoBody").innerHTML = `
      <p><strong>Prefix:</strong> ${shop.prefix}</p>
      ${linesHTML}
    `;
}

function closeShopInfoModal() {
    document.getElementById("shopInfoModal").style.display = "none";
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î Modal ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
function openEditShopModal(name, prefix) {
    document.getElementById("editShopName").value = name;
    document.getElementById("editShopPrefix").value = prefix;
    currentEditingPrefix = prefix;
    document.getElementById("editShopModal").style.display = "flex";
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î Modal
function closeEditShopModal() {
    document.getElementById("editShopModal").style.display = "none";
}

// ‡πÄ‡∏õ‡∏¥‡∏î Modal
function openAddShopModal() {
    document.getElementById("addShopModal").style.display = "flex";
}

// ‡∏õ‡∏¥‡∏î Modal
function closeAddShopModal() {
    document.getElementById("addShopModal").style.display = "none";
}


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
async function saveShopChanges() {
    const newName = document.getElementById("editShopName").value.trim();

    if (!newName) {
        showAlertMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô!", "alertMessageEditShop", false);
        return;
    }

    const response = await fetch("/api/update-shop", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prefix: currentEditingPrefix, name: newName })
    });

    const result = await response.json();
    if (result.success) {
        alert("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        window.location.reload(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤
    } else {
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + result.message, "alertMessageEditShop", false);
    }
}

function showAlertMessage(message, elementId = "alertMessageEditShop", isSuccess = false) {
    const alertDiv = document.getElementById(elementId);
    if (!alertDiv) {
        return;
    }
    alertDiv.innerText = message;
    alertDiv.style.color = isSuccess ? "green" : "red";
    alertDiv.style.backgroundColor = isSuccess ? "#e6ffe6" : "#ffe6e6";
    alertDiv.style.border = isSuccess ? "1px solid green" : "1px solid red";
    alertDiv.style.display = "block";

    setTimeout(() => {
        alertDiv.style.display = "none";
        console.log(`‚è≥ ‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà ${elementId}`);
    }, 3000);
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÇ‡∏´‡∏•‡∏î‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ + render
async function loadShopsAndRender() {
    try {
        const response = await fetch("/api/shops");
        const data = await response.json();
        shopData = data.shops || [];

        const shopListElement = document.getElementById("shop-list");
        if (!shopData.length) {
            shopListElement.innerHTML = '<div class="no-shop">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤</div>';
            return;
        }

        let html = "";
        shopData.forEach(shop => {
            const slipCheckOption = shop.slipCheckOption || "duplicate";

            html += `
          <div class="main-page shop-item">
            <div class="shop-info ${shop.status ? "active" : "inactive"}">
              <span class="status-dot"></span>
              <span class="shop-name">${shop.name}</span>
            </div>
            <div class="slip-check-option">
              <select onchange="updateSlipCheckOption('${shop.prefix}', this.value)">
                <option value="duplicate" ${slipCheckOption === "duplicate" ? "selected" : ""}>‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏•‡∏¥‡∏õ‡∏ã‡πâ‡∏≥</option>
                <option value="all" ${slipCheckOption === "all" ? "selected" : ""}>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ö‡∏ö</option>
              </select>
            </div>
            <div class="buttons">
              <label class="switch">
                <input type="checkbox" ${shop.status ? "checked" : ""} onchange="handleToggle('${shop.prefix}', this)">
                <span class="slider"></span>
              </label>
              <button class="btn btn-line" onclick="openShopLinesModal('${shop.prefix}')">
                    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/41/LINE_logo.svg/120px-LINE_logo.svg.png" class="btn-logo" alt="LINE Logo"/>
                    ‡πÑ‡∏•‡∏ô‡πå‡∏£‡πâ‡∏≤‡∏ô
              </button>
              <button class="btn btn-bank" onclick="openBankModal('${shop.prefix}')">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</button>
              <button class="btn btn-info btn-shop-info" data-prefix="${shop.prefix}">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤</button>
              <button class="btn btn-edit" onclick="openEditShopModal('${shop.name}', '${shop.prefix}')">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
              <button class="btn btn-delete" onclick="deleteShop('${shop.prefix}')">‡∏•‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤</button>
            </div>
          </div>
        `;
        });

        shopListElement.innerHTML = html;
        document.querySelectorAll(".btn-shop-info").forEach(btn => {
            btn.addEventListener("click", () => {
                const prefix = btn.getAttribute("data-prefix");
                const shop = shopData.find(s => s.prefix === prefix);
                if (shop) openShopInfoModal(shop);
            });
        });
    } catch (err) {
        console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
    }
}

// ‚úÖ Event ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
(async () => {
    console.log("‚úÖ main.js loaded and executing immediately");
    await loadShopsAndRender();
    await fetchAndRenderQuota();
})();

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤
async function fetchAndRenderQuota() {
    try {
        const res = await fetch("/api/quota");
        const data = await res.json();
        const el = document.querySelector(".quota");
        if (!el) {
            console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö .quota element ‡πÉ‡∏ô DOM");
            return;
        }

        if (data.quota === 0) {
            el.textContent = `‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠: -${Math.round(data.overQuota || 0)}`;
            el.style.color = "#dc3545";
        } else {
            el.textContent = `‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${data.quota}`;
            el.style.color = "#111111";
        }
    } catch {
        document.querySelector(".quota").textContent = "‡πÇ‡∏Ñ‡πâ‡∏ß‡∏ï‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö";
    }
}

function openBankModal(prefix) {
    let modal = document.getElementById("bankModal");

    if (!modal) {
        modal = document.createElement("div");
        modal.id = "bankModal";
        modal.className = "modal";
        document.body.appendChild(modal);
    }

    modal.style.display = "flex";  // ‡πÄ‡∏õ‡∏¥‡∏î Modal

    fetch("/api/bank-accounts")
        .then((res) => res.json())
        .then((data) => {
            const accounts = data.accounts[prefix] || [];
            const listContainer = document.getElementById("bank-list");
            const bankTitle = document.getElementById("BankTitle");

            listContainer.innerHTML = "";
            const shop = shopData.find(s => s.prefix === prefix);
            if (shop) {
                shop.bankAccounts = accounts; // ‚úÖ ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤
                bankTitle.textContent = `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏£‡πâ‡∏≤‡∏ô: ${shop.name}`;
            }

            if (accounts.length === 0) {
                listContainer.innerHTML = "<p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ</p>";
            } else {
                accounts.forEach((account, index) => {
                    const row = document.createElement("div");
                    row.className = "bank-row";
                    row.innerHTML = `
              <div class="shop-info ${account.status ? "active" : "inactive"}">
                <span class="status-dot"></span>
                <span class="shop-name">${account.name}</span>
              </div>
              <div class="slip-check-option">
                <label class="switchBank">
                  <input type="checkbox" ${account.status ? "checked" : ""} onchange="toggleBankStatus('${prefix}', ${index}, this)">
                  <span class="slider"></span>
                </label>
              </div>
              <div class="buttons">
                <button class="line-btn-edit" onclick="openEditBankModal('${prefix}', ${index})">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                <button class="line-btn-delete" onclick="deleteBank('${prefix}', ${index})">‡∏•‡∏ö</button>
              </div>
            `;
                    listContainer.appendChild(row);
                });
            }

            // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            const addBtn = document.createElement("button");
            addBtn.className = "btn btn-add-bank";
            addBtn.textContent = "+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà";
            addBtn.style.marginTop = "30px";
            addBtn.style.fontSize = "16px";
            addBtn.style.padding = "10px 20px";
            addBtn.style.borderRadius = "8px";
            addBtn.addEventListener("click", () => openAddBankModal(prefix));
            listContainer.appendChild(addBtn);
            
            modal.style.display = "flex";
        })
        .catch((err) => {
            console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£:", err);
        });
}

function openAddBankModal(prefix) {
    let modal = document.getElementById("addbankModal");

    // ‡πÄ‡∏õ‡∏¥‡∏î Modal
    modal.style.display = "flex";
    console.log("‡πÄ‡∏õ‡∏¥‡∏î Modal ‡πÅ‡∏•‡πâ‡∏ß");

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° prefix
    const shop = shopData.find(s => s.prefix === prefix);
    console.log("shop: ", shop);

    if (!shop) {
        console.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô");
        return;
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏ô Modal
    const shopName = shop.name;
    console.log("‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô: ", shopName); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô

    document.getElementById("lineShopNameTitle").textContent = `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô: ${shopName}`;

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô input fields
    document.getElementById("bankAccountName").value = "";
    document.getElementById("bankAccountNumber").value = "";
}


// ‡∏õ‡∏¥‡∏î Modal
function closeAddBankModal() {
    document.getElementById("addbankModal").style.display = "none";
}

function closeBankModal() {
    const modal = document.getElementById("bankModal");
    if (modal) {
        modal.style.display = "none";  // ‡∏ã‡πà‡∏≠‡∏ô Modal
    }
}

async function toggleBankStatus(prefix, index, checkbox) {
    const newStatus = checkbox.checked;
    try {
        const res = await fetch("/api/update-bank-status", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ prefix, index, status: newStatus }),
        });

        const result = await res.json();
        if (!result.success) {
            alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏î‡πâ: " + result.message);
            checkbox.checked = !newStatus;
        }
    } catch (err) {
        console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£", err);
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£");
        checkbox.checked = !newStatus;
    }
}

function openEditBankModal(prefix, index) {
    const modal = document.getElementById("editbankModal");
    const shop = shopData.find(s => s.prefix === prefix);
    if (!shop || !shop.bankAccounts || !shop.bankAccounts[index]) {
        console.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£");
        return;
    }

    const account = shop.bankAccounts[index];
    document.getElementById("editBankAccountName").value = account.name;
    document.getElementById("editBankAccountNumber").value = account.account;

    modal.style.display = "flex";
}
function closeEditBankModal() {
    document.getElementById("editbankModal").style.display = "none";
}

function deleteBank(prefix, index) {
    if (!confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ?")) return;
    fetch("/api/delete-bank", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prefix, index }),
    })
        .then((res) => res.json())
        .then((result) => {
            if (result.success) {
                alert("‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
                openBankModal(prefix);
            } else {
                alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏î‡πâ: " + result.message);
            }
        })
        .catch((err) => {
            console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£", err);
        });
}

function saveNewBank(prefix) {
    const name = document.getElementById("bankAccountName").value.trim();
    const number = document.getElementById("bankAccountNumber").value.trim();

    if (!name || !number) {
        alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö");
        return;
    }

    fetch("/api/add-bank", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({ prefix, name, number })
    })
        .then(res => res.json())
        .then(result => {
            if (result.success) {
                alert("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
                document.querySelector(".modal.bank-modal").remove();
                openBankModal(prefix);
            } else {
                alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏î‡πâ: " + result.message);
            }
        })
        .catch(err => {
            console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£", err);
        });
}


function showAlertMessage(message, elementId = "alertMessageShop", isSuccess = false) {
    const alertDiv = document.getElementById(elementId);
    if (!alertDiv) {
        return;
    }
    alertDiv.innerText = message;
    alertDiv.style.color = isSuccess ? "green" : "red";
    alertDiv.style.backgroundColor = isSuccess ? "#e6ffe6" : "#ffe6e6";
    alertDiv.style.border = isSuccess ? "1px solid green" : "1px solid red";
    alertDiv.style.display = "block";

    setTimeout(() => {
        alertDiv.style.display = "none";
    }, 3000);
}

async function addShop() {
    const shopName = document.getElementById("shopName").value.trim();
    const shopPrefix = document.getElementById("shopPrefix").value.trim();

    if (!shopName || !shopPrefix) {
        showAlertMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô!", "alertMessageShop", false);
        return;
    }

    const response = await fetch("/api/add-shop", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name: shopName, prefix: shopPrefix })
    });

    const result = await response.json();
    if (result.success) {
        alert("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        window.location.reload(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤
    } else {
        showAlertMessage(result.message, "alertMessageShop", false);
    }
}

function closeBotSettingsModal() {
    document.getElementById("botSettingsModal").style.display = "none";
}


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô API
async function updateShopStatus(prefix, newStatus) {
    try {
        const response = await fetch("/api/update-shop-status", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ prefix, status: newStatus })
        });

        const result = await response.json();
        if (result.success) {
            console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô ${prefix} ‡πÄ‡∏õ‡πá‡∏ô: ${newStatus ? "‡πÄ‡∏õ‡∏¥‡∏î" : "‡∏õ‡∏¥‡∏î"}`);
        } else {
            console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô: ${result.message}`);
        }
    } catch (error) {
        console.error("‚ùå Error updating shop status:", error);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå (Toggle) ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
async function handleToggle(prefix, checkbox) {
    const newStatus = checkbox.checked; // true: ‡πÄ‡∏õ‡∏¥‡∏î, false: ‡∏õ‡∏¥‡∏î
    try {
        const response = await fetch("/api/update-shop", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ prefix, status: newStatus })
        });

        const result = await response.json();
        if (result.success) {
            alert(`‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô ${newStatus ? "‡πÄ‡∏õ‡∏¥‡∏î" : "‡∏õ‡∏¥‡∏î"} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
            window.location.reload(); // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        } else {
            alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ: " + result.message);
            checkbox.checked = !newStatus; // ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        }
    } catch (error) {
        console.error("Error updating shop status:", error);
        alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤");
        checkbox.checked = !newStatus; // ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
async function deleteShop(prefix) {
    if (!confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤?")) return;
    try {
        const response = await fetch("/api/delete-shop", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ prefix })
        });
        if (!response.ok) {
            throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ");
        }
        const result = await response.json();
        if (result.success) {
            window.location.reload();
        } else {
            alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ");
        }
    } catch (error) {
        console.error("Error deleting shop:", error);
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤");
    }
}

async function updateSlipCheckOption(prefix, newOption) {
    try {
        const response = await fetch("/api/update-slip-option", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ prefix, slipCheckOption: newOption })
        });

        const result = await response.json();
        if (result.success) {
            alert(`‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏õ‡πá‡∏ô "${newOption}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ú‡∏•.`);
            window.location.reload(); // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        } else {
            alert(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏•‡∏¥‡∏õ: ${result.message}`);
        }
    } catch (error) {
        console.error("‚ùå Error updating slip check option:", error);
    }
}

window.addEventListener("DOMContentLoaded", async () => {
    try {
        const response = await fetch("/api/shops");
        const data = await response.json();
        const shopListElement = document.getElementById("shop-list");

        if (!data.shops || data.shops.length === 0) {
            shopListElement.innerHTML = '<div class="no-shop">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤</div>';
            return;
        }

    } catch (error) {
        console.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤:", error);
    }
});

