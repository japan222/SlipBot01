import path from "path";
import fs from "fs";

// üìå ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ prefix
const qrdatapath = {
    "GDD": path.join(process.cwd(), "qrdata/GDD.json"),
    "BIW": path.join(process.cwd(), "qrdata/BIW.json"),
    "VCE": path.join(process.cwd(), "qrdata/VCE.json"),
    "APB": path.join(process.cwd(), "qrdata/APB.json"),
    "GHB": path.join(process.cwd(), "qrdata/GHB.json"),
    "LUX": path.join(process.cwd(), "qrdata/LUX.json"),
    "PGW": path.join(process.cwd(), "qrdata/PGW.json"),
    "JDX": path.join(process.cwd(), "qrdata/JDX.json"),
    "JPN": path.join(process.cwd(), "qrdata/JPN.json"),
    "KRM": path.join(process.cwd(), "qrdata/KRM.json"),
    "JEN": path.join(process.cwd(), "qrdata/JEN.json"),
    "JYX": path.join(process.cwd(), "qrdata/JYX.json"),
    "ADN": path.join(process.cwd(), "qrdata/ADN.json"),
    "DOB": path.join(process.cwd(), "qrdata/DOB.json"),
    "MMA": path.join(process.cwd(), "qrdata/MMA.json"),
    "GNV": path.join(process.cwd(), "qrdata/GNV.json"),
    "TGO": path.join(process.cwd(), "qrdata/TGO.json"),
    "BFU": path.join(process.cwd(), "qrdata/BFU.json"),
    "SF": path.join(process.cwd(), "qrdata/SF.json")
};

const loadQRDatabaseFromFile = (prefix) => {
    const filePath = qrdatapath[prefix];
    if (!filePath) {
        console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö prefix: ${prefix}`);
        return new Map(); // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô undefined
    }

    if (!fs.existsSync(filePath)) {
        console.warn(`‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå ${filePath} ‡πÑ‡∏°‡πà‡∏û‡∏ö ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...`);
        fs.writeFileSync(filePath, JSON.stringify([]));
    }

    let rawData;
    try {
        rawData = fs.readFileSync(filePath, "utf-8");
        if (!rawData.trim()) {
            console.warn(`‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå ${filePath} ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô []`);
            rawData = "[]";
            fs.writeFileSync(filePath, rawData);
        }
    } catch (error) {
        console.error(`‚ùå ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå ${filePath} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, error.message);
        return new Map();
    }

    try {
        const parsedData = JSON.parse(rawData);
        if (!Array.isArray(parsedData)) {
            console.error(`‚ùå ‡πÑ‡∏ü‡∏•‡πå ${filePath} ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô []`);
            fs.writeFileSync(filePath, JSON.stringify([]));
            return new Map();
        }

        const qrDatabase = new Map(parsedData.map(({ qrData, firstDetected, amount, users }) => [
            qrData,
            { firstDetected, amount: amount || 0, users: new Map(users) }
        ]));
        return qrDatabase;
    } catch (error) {
        console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á JSON ‡∏Ç‡∏≠‡∏á ${filePath}:`, error.message);
        console.warn(`‚ö†Ô∏è ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÑ‡∏ü‡∏•‡πå ${filePath} ‡πÄ‡∏õ‡πá‡∏ô []`);
        fs.writeFileSync(filePath, JSON.stringify([]));
        return new Map();
    }
};


const saveQRDatabaseToFile = (prefix, qrDatabase) => {
    const filePath = qrdatapath[prefix];
    if (!filePath) {
        console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö prefix: ${prefix}`);
        return;
    }

    try {
        // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        const existingData = fs.existsSync(filePath) ? JSON.parse(fs.readFileSync(filePath, "utf-8")) : [];

        const dataToSave = Array.from(qrDatabase.entries()).map(([qrData, info]) => {
            const updatedEntry = {
                qrData,
                firstDetected: info.firstDetected,
                users: Array.from(info.users.entries()) // ‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á map ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏á
            };
        
            if (info.amount !== undefined && info.amount !== null && info.amount > 0) {
                updatedEntry.amount = info.amount;
            }
        
            return updatedEntry;
        });

        fs.writeFileSync(filePath, JSON.stringify(dataToSave, null, 2));
    } catch (error) {
        console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå ${filePath}:`, error.message);
    }
};

export { loadQRDatabaseFromFile, saveQRDatabaseToFile };
